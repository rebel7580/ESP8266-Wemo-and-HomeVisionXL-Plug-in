# Wemo plugin for HomeVision - Ron Boston
# Parts borrowed from plug-ins written by Schelte Bron
# Version 1.0
# $Revision: 1.7 $
# $Date: 2017/09/22 14:56:09 $

hvImport debug

set version {$Id: wemo.hap,v 1.7 2017/09/22 14:56:09 ron Exp $}
debug "$version" blue

tcl::tm::path add [file dirname [info script]]

array set cfg {
    serPre "wemo:"
    serPost ";"
    netioType "wemo"
    geometry  ""
    discover 0
    sortIp 0
    sortName 0
}

# Start M-Search section

# IANA assigned UPnP multicast address and port
set mcastaddr 239.255.255.250
set mcastport 1900
set apiversion 1.15.0

package require udp

set udpChan ""
set refresh 300
set cfg(discover) 1
set searchResults ""

proc start_search {} {
    global udpChan
    global mcastaddr mcastport  serverport
    global searchResults
    
    set searchResults ""
    
    # save any config changes before discovery
    saveconfig
    
    # The reuse option will allow multiple apps to listen on the same UDP port.
    if {[catch {udp_open $mcastport reuse} result]} {
        # Some other UPnP application has already claimed the ssdp port
        debug "can't open ssdp port" $result $::errorCode
    }
    set udpChan $result
    # Join the multicast group
    fconfigure $udpChan -mcastadd $mcastaddr -remote [list $mcastaddr $mcastport]
    # Using "-buffering none" has the undesired side-effect that the implied
    # newline of the puts command gets sent in a separate UDP package.
    fconfigure $udpChan -blocking 0 -translation {auto crlf} -mcastloop 1
    fileevent $udpChan readable [list receiveUDP]

    # Send a M-Search Message for Wemo device
    set msg {M-SEARCH * HTTP/1.1}
    append msg \n "Host: 239.255.255.250:1900" \n
    append msg {Man: "ssdp:discover"} \n "ST: urn:Belkin:device:**" \n
    debug "$msg" red
    puts $udpChan $msg
    flush $udpChan
}

proc receiveUDP {} {
    global udpChan refresh cfg
    global searchResults

    set data [read $udpChan]
    # Discard false triggers
    if {$data eq ""} return
    set peer [fconfigure $udpChan -peer]
    try {
        # Bail out early on messages that can't be M-SEARCH responses.
        set ldata [split $data \n]
        if {![string equal [lindex $ldata 0] "HTTP/1.1 200 OK"]} return
        set hdr [headers $ldata]
	if {![dict exists $hdr st] || ![dict exists $hdr location]} return
	if {"urn:Belkin:device:**" ni [dict get $hdr st]} return
	if {[regexp {http://([0-9\.]+):([0-9]+)/*} [dict get $hdr location] --> ip port]} {
            debug "ip,port: $ip,$port"
            if {$cfg(discover)} {
                regexp {^(uuid:.+)::.+$} [dict get $hdr usn] match usn
                debug $usn red
                dict set searchResults $usn ip $ip
                dict set searchResults $usn port $port
                debug "search results: $searchResults"  red
                after cancel getDeviceNames
                after 2000 getDeviceNames
            }
        }
	if {[dict exists $hdr cache-control]} {
	    set time [lindex [split [dict get $hdr cache-control] '='] 1]
	    debug "time:$time" red
	    if {$time < $refresh} {
	        set time $refresh
	    }
	} else {
	    set time $refresh
	}
	after cancel start_search
	after [expr {$time * 1000}] start_search

        after 2000 {
            catch {close $udpChan}
            debug "UDP closed" darkred
        }
    } on return - {
        debug "$data" blue
    }
}

proc headers {data} {
    set rc {}
    foreach line $data {
	if {[regexp {^([^][()<>@,;:\\""/?={}\s]+):\s*(.*)} \
            [string trimright $line] -> name value]} {
	    dict set rc [string tolower $name] $value
	    debug "name:value: $name,$value" blue
	}
    }
    return $rc
}

# End M-Search ection

# Start Http section

set sockChan ""
package require tdom

# Set up socket to Wemo Device
proc startclient {ip port} {
    global cfg sockChan

    catch {close $sockChan}
    debug "(Re)starting Client, $ip:$port" blue
    if {[catch {socket $ip $port} sockChan]} {
        debug "*** Client FAILED ***: $sockChan" red
        return -code error $sockChan
    }
    chan configure $sockChan -blocking 0
    debug "Client Started: $sockChan" darkslategray
    chan event $sockChan readable [list readdata $sockChan]
    return 1
}

proc getDeviceNames {} {
    global searchResults

    debug "getDeviceNames: $searchResults" red
    dict for {udn info} $searchResults {
        if {[dict exists $searchResults $udn done]} {continue}
        dict with info {
            debug "found new entry: $info" green
            dict set searchResults $udn done 1
            set cmd "GET "
            append cmd "/setup.xml HTTP/1.1" \n
            append cmd "Content-Type: text/xml" \n
            append cmd "Content-Length: 0" \n \n
            sendCmd "" $cmd $ip $port
            after 200 getDeviceNames 
            return            
        }
    }
}

# Get ip for device
proc getip {name} {

     set n [mk::select cfg.devices!0 name $name]
     if {$n != {}} {
        return [mk::get cfg.devices!$n ip port]
    }
    debug "failed to find device $name"
    return [list 0 0]
}

# Send command through socket
proc sendCmd {name cmd {ip 0} {port 0}} {
    global sockChan

    lassign [getip $name] tip tport
    if {$ip != 0} {
    } elseif {$tip in {0 ""}} {
        return
    } else {
        set ip $tip
    }
    if {$port != 0} {
    } elseif {$tport in {0 ""}} {
        set port 80
    } else {
        set port $tport
    }
    if {[catch {startclient $ip $port}]} {return}
    if {[catch {puts $sockChan $cmd} result]} {
        debug "Write error: $result" red
    }
    if {[catch {flush $sockChan} result]} {
        debug "flush error $result" red
    }
}

# Create command to send
proc createCmd {cmd} {

    if {[string tolower $cmd] in {1 "on"}} {
        set state "power%20on"
    } elseif {[string tolower $cmd] in {0 "off"}} {
        set state "power%20off"
    } elseif {[string tolower $cmd] in {2 "toggle"}} {
        set state "power%20toggle"
    } elseif {[string tolower $cmd] in {"state"}} {
        set state "power"
    } else {
        set state "power%20off"
    }

    set data "GET "
#    append data "/switch?st=" $state " HTTP/1.1" \n
    append data "/cm?cmnd=" $state " HTTP/1.1" \n
    append data "Content-Type: text/plain" \n
    append data "Content-Length: 0" \n \n
    return $data
}

# Read response
proc readdata {f} {
    set line ""
    if {[eof $f] || [catch {gets $f line} result]} {
        debug "no input" blue
        close $f
    } elseif {$result != -1} {
        debug  "$line" green
        if {[string match {<\?xml *} $line]} {
            parseSetup $line
        }
    } else {
        debug "Done"
    }
}

# parse resposnse to setup.xml
proc parseSetup {data} {
    global searchResults
    
    # Hack to take off <?xml> tag
    set xml [string range $data 21 end]
    
    if {[catch {dom parse $xml doc}]} {return}

    set root [$doc documentElement]

    if {[set node [$root selectNodes /root/device/friendlyName]] eq ""} {
        debug "No FriendlyName" red
        return
    }
    if {![$node hasChildNodes]} {
        debug "No FriendlyName data" red
        return        
    }
    set fn [[$node firstChild] data]
    if {$fn eq ""} {
        debug "FriendlyName is null" red
        return
    }
    debug "FriendlyName:$fn"
    if {[set node [$root selectNodes /root/device/UDN]] eq ""} {
         debug "no UDN" red 
       return
    }
    if {![$node hasChildNodes]} {
        debug "no UDN data" red 
        return
    }
    set udn [[$node firstChild] data]
    if {$udn eq ""} {
        debug "UDN is null" red
        return
    }
    debug "fn:$fn;udn:$udn" blue
    
    if {![dict exists $searchResults $udn]} {return}
    dict set searchResults $udn fn $fn
    set ip [dict get $searchResults $udn ip]
    set port [dict get $searchResults $udn port]
    set row [mk::select cfg.devices name $fn]
    debug "ip:$ip;port:$port;row:$row;" red
    foreach i [lreverse $row] {
        mk::row delete cfg.devices!$i
    } 
    set row [mk::select cfg.devices ip $ip]
    debug "ip:$ip;port:$port;row:$row;" red
    foreach i [lreverse $row] {
        mk::row delete cfg.devices!$i
    } 
    mk::row append cfg.devices name $fn ip $ip port $port dis 1

    cfg_sortlist
}

# End Http section

# Start Trigger section

# netioaction is called by NetIO "netioaction" command.
# Example: sends: netioaction wemo name [0|off|1|on|2|toggle]
# "wemo" must match config's netioType.
# "name" must match an allowed device name.
hvPublic netioaction
proc netioaction {args} {
    global cfg
    lassign $args type name state
    if {$type ne $cfg(netioType)} {return ""}
    if {$state eq ""} {return ""}
    sendCmd $name [createCmd $state]
}

# netio is called by NetIO "get" command.
# Example: reads: get wemo state 0 {value}
# "wemo" must match config's netioType.
# "state" is a don't care, but something must be present.
# "0" is a don't care, but something must be present.
# "value" is the name of the info to be returned.
# Note: Not yet implemented to return anything useful.
hvPublic netio
proc netio {type args} {
    global cfg
    if {$type ne $cfg(netioType)} {return ""}
    # Can't get anything from the Wemo yet, return "unknown" for now
    return "Unknown item $args"
}

# Serial string to trigger switch
# Example: Wemo: name [0|off|1|on|2|toggle];
# "Wemo:" should be config's serPre (serial Prefix string).
# "name" must match an allowed device name.
# ";" should be config's serPost (serial terminator character(s)).
# A single space must follow serPre and precede the key string.
proc wemoserial {data} {
    global cfg
    debug "serial: $data" red
    set fmt "$cfg(serPre) (\\w+)\\s+(\\w+)$cfg(serPost)"
    if {![regexp -nocase $fmt $data match name state]} {
        debug "fail"
        return 0
    } elseif {$name eq ""} {
        return -1
    } else {
        sendCmd $name [createCmd $state]
        return [string length $match]
    }
}

# End Trigger section

# Start Config Section

# Get the config info from cfg file
proc loadconfig {} {
    global cfgfile cfg
    package require Mk4tcl

    set suffix [hvVariable ApplicationSuffix]
    if {$suffix eq ""} {
        set cfgfile wemo.cfg
    } else {
        set cfgfile wemo-$suffix.cfg
    }
    mk::file open cfg
    if {![catch {hvConfigFile open $cfgfile} f]} {
        mk::file load cfg $f
        close $f
    }
    # General settings
    mk::view layout cfg.main {
        name value
    }
    # Devices
    mk::view layout cfg.devices {
        name ip port dis
    }
    if {[catch {hvConfig Geometry} geometry]} {
	set geometry ""
    }

    # update config
    mk::loop row cfg.main {
        array set cfg [mk::get $row name value]
    }
}

# Save config changes to cfg file
proc saveconfig {{top ""}} {
    global cfg cfgfile
    if {[winfo exists .net]} {
        set cfg(geometry) [wm geometry .net]
    }
    mk::view size cfg.main 0
    foreach {var val} [array get cfg] {
        mk::row append cfg.main name $var value $val
    }
    set bkup wemo-[pid].$$$
    set rc [catch {hvConfigFile create $bkup w} f]
    if {$rc == 0} {
        mk::file save cfg $f
        close $f
        hvConfigFile delete $cfgfile
        hvConfigFile rename $bkup $cfgfile
    } elseif {$top ne ""} {
        ttk::messageBox -parent $top -message $f -icon error -type ok
    } else {
        debug "Failed to save configuration: $f"
    }
    return [expr {!$rc}]
}

# Wemo configuration screen
proc cfg_server {} {
    global cfg
    if {[winfo exists .net]} {
        wm withdraw .net
        wm deiconify .net
        return
    }
    ttk::toplevel .net
    wm withdraw .net
    wm title .net "Wemo Configuration"
    wm resizable .net 0 0

    ttk::frame .net.f
    ttk::frame .net.f.f1 -relief groove -borderwidth 2

    ttk::frame .net.f.f1.ni
    ttk::frame .net.f.f1.ni.f
    ttk::treeview .net.f.f1.ni.f.tv -columns {name ip port} \
      -displaycolumns {name ip port} -show headings -height 5 \
      -yscrollcommand {.net.f.f1.ni.f.vs set} -selectmode browse
    .net.f.f1.ni.f.tv column name -stretch 1 -width 120 -anchor center
    .net.f.f1.ni.f.tv heading name -text "Device Name" -command [list cfg_sort name]
    .net.f.f1.ni.f.tv column ip -stretch 1 -width 140 -anchor center
    .net.f.f1.ni.f.tv heading ip -text "IP Addr" -command [list cfg_sort ip]
    .net.f.f1.ni.f.tv column port -stretch 1 -width 80 -anchor center
    .net.f.f1.ni.f.tv heading port -text "Port"
    ttk::scrollbar .net.f.f1.ni.f.vs -command {.net.f.f1.ni.f.tv yview}
    grid .net.f.f1.ni.f.tv .net.f.f1.ni.f.vs -sticky news
    grid columnconfigure .net.f.f1.ni.f .net.f.f1.ni.f.tv -weight 1
    grid rowconfigure .net.f.f1.ni.f .net.f.f1.ni.f.tv -weight 1
    ttk::button .net.f.f1.ni.b1 -text Edit -command cfg_namechgdlg -state disabled
    ttk::button .net.f.f1.ni.b2 -text New -command cfg_nameadddlg
    ttk::button .net.f.f1.ni.b3 -text Delete -command cfg_namedel -state disabled
    grid .net.f.f1.ni.f - - -padx 4 -pady 4 -sticky wens
    grid .net.f.f1.ni.b1 .net.f.f1.ni.b2 .net.f.f1.ni.b3 -padx 4 -pady 4 -sticky ew
    ttk::checkbutton .net.f.f1.ni.c1 -text "Allow Discovery" -variable cfg(discover) \
       -command cfg_allow_discover
    ttk::button .net.f.f1.ni.b4 -text Discover -width 6 -command start_search \
      -state disabled
    grid  .net.f.f1.ni.c1 .net.f.f1.ni.b4  -padx 4 -pady 4 -sticky ew
    grid columnconfigure .net.f.f1.ni all -weight 1
    grid rowconfigure .net.f.f1.ni .net.f.f1.ni.f -weight 1
    bind .net.f.f1.ni.f.tv <<TreeviewSelect>> {cfg_devicesel %W}
    bind .net.f.f1.ni.f.tv <Double-1> {cfg_namedbl %W %x %y}
    set m [menu .rtclkMenu]
    $m add command -label "Off" -command {cfg_rtclkdlg Off}
    $m add command -label "On" -command {cfg_rtclkdlg On}
    $m add command -label "Toggle" -command {cfg_rtclkdlg Toggle}
    $m add command -label "State" -command {cfg_rtclkdlg State}
    bind .net.f.f1.ni.f.tv <Button-3> {cfg_rtclk %W %x %y %X %Y}
    catch {.net.f.f1.ni.f.tv tag configure blue -foreground blue}
    catch {.net.f.f1.ni.f.tv tag configure black -foreground black}
   
    cfg_sortlist

    ttk::separator .net.f.f1.sep
    ttk::label .net.f.f1.l9 -text "Netio string:" -anchor w
    ttk::entry .net.f.f1.e9 -width 10 -justify center -textvariable cfg(netioType)
    ttk::label .net.f.f1.l10 -text "Serial string prefix string:" -anchor w
    ttk::entry .net.f.f1.e10 -width 10 -justify center -textvariable cfg(serPre)
    ttk::label .net.f.f1.l11 -text "Serial string terminator character(s):" -anchor w
    ttk::entry .net.f.f1.e11 -width 5 -justify center -textvariable cfg(serPost)

    grid .net.f.f1.ni -column 0 -columnspan 2 -sticky nws -padx 3

    grid .net.f.f1.sep -column 0 -columnspan 2 -sticky ew -padx 3 -pady 3
    grid .net.f.f1.l9 .net.f.f1.e9   -sticky nws -padx 3
    grid configure .net.f.f1.l9      -sticky nes -padx 3
    grid .net.f.f1.l10 .net.f.f1.e10 -sticky nws -padx 3
    grid configure .net.f.f1.l10     -sticky nes -padx 3
    grid .net.f.f1.l11 .net.f.f1.e11 -sticky nws -padx 3
    grid configure .net.f.f1.l11     -sticky nes -padx 3

    grid columnconfigure .net.f.f1 1 -weight 1
    grid .net.f.f1 -sticky news  -padx 5 -pady 5
    grid .net.f    -sticky we    -padx 5 -pady 5 -columnspan 2

    ttk::button .net.b3 -text Done -width 8 -command cfg_done
    wm protocol .net WM_DELETE_WINDOW {.net.b3 invoke}
    grid  x .net.b3 -padx {4 13} -pady {2 8} -sticky ne
    grid columnconfigure .net 2 -weight 1
    grid columnconfigure .net {0 1} -uniform 1

    if {[regexp {\+-?[0-9]+\+-?[0-9]+} $cfg(geometry) loc]} {
        wm geometry .net $loc
    }
    wm deiconify .net
    cfg_allow_discover

}

proc cfg_pluginmenu {} {
    global cfg
    set str "Wemo"
    # Delete any existing menu entries
    catch {hvMenu Configure delete $str}
    catch {hvMenu Help delete $str}
    if {![catch {hvMenu Main cget Plugins -menu} menu]} {
        if {![catch {hvMenu $menu index $str} x] && $x ne "none"} {
            hvMenu $menu delete $x
            hvMenu Main delete Plugins
        }
    }
    if {![catch {hvMenu Help cget Plugins -menu} help]} {
        if {![catch {hvMenu $help index $str} x] && $x ne "none"} {
            hvMenu $help delete $x
            hvMenu Help delete Plugins
        }
    }
    if {[catch {hvMenu Main cget Plugins -menu} menu]} {
        set menu Main.plugins
        hvMenu Main add cascade -label Plugins \
          -menu $menu -underline 0
    }
    hvMenu $menu add command \
      -label "Wemo" -command cfg_server

    if {[hvHelpFile wemo.hlp]} {
        if {[catch {hvMenu Help cget Plugins -menu} menu]} {
            set menu Help.plugins
            hvMenu Help add cascade -label Plugins -menu $menu
        }
        hvMenu $menu add command -label "Wemo" \
          -command [list hvHelp index]
    }
}

proc cfg_devicesel {w} {
    if {[llength [$w selection]]} {
        .net.f.f1.ni.b1 state !disabled
        .net.f.f1.ni.b3 state !disabled
    } else {
        .net.f.f1.ni.b1 state disabled
        .net.f.f1.ni.b3 state disabled
    }
}

proc cfg_namedbl {w x y} {
    # Use identify row instead of item for compatibility with 8.5.8 and 8.5.9
    if {[$w identify row $x $y] ne ""} {
        .net.f.f1.ni.b1 invoke
    }
}

# put up right-click menu
proc cfg_rtclk {w x y X Y} {
    set item [$w identify item $x $y]
    if {$item ne ""} {
        $w selection set $item
        tk_popup .rtclkMenu $X $Y
    }
}

# process command selected in right-click menu
proc cfg_rtclkdlg {cmd} {
    # Use identify row instead of item for compatibility with 8.5.8 and 8.5.9
    set item [lindex [.net.f.f1.ni.f.tv selection] 0]
    lassign [.net.f.f1.ni.f.tv item $item -values] name
    sendCmd $name [createCmd $cmd]    
}

# IP portion from BBH at http://wiki.tcl.tk/1899
proc cfg_validate {str type var} {
    global wemoport wemoip wemoname
    upvar #0 $var other
     
    if {$var eq "wemoname"} {
    	set name $other
    	set ip $str
        set port $wemoport
    } elseif {$var eq "wemoip"} {
    	set ip $other
    	set name $str
        set port $wemoport
    } elseif {$var eq "wemoport"} {
        set port $str
        set ip $wemoip
        set name $wemoname
    }    
    set ipnum1 {\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]}
    set ipnum2 {\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]}
    set ipnum3 {\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]}
    set ipnum4 {\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]}
    set fullExp {^($ipnum1)\.($ipnum2)\.($ipnum3)\.($ipnum4)$}
    set partialExp {^(($ipnum1)(\.(($ipnum2)(\.(($ipnum3)(\.(($ipnum4)?)?)?)?)?)?)?)?$}
    set fullExp [subst -nocommands -nobackslashes $fullExp]
    set partialExp [subst -nocommands -nobackslashes $partialExp]

    if {[regexp -- $fullExp $ip] && \
          [string length $name] >= 3 && [regexp {^[a-zA-Z]+$} $name] && \
          $port > 0 && $port < 65536} {        
        .net.usr.f.b1 state !disabled
        return 1
    } else {
        .net.usr.f.b1 state disabled
        if {$var eq "wemoname"} { 
            return [regexp -- $partialExp $ip]
        } else {
            return 1
        }
    }
}

proc old_cfg_namevalidate {str var} {

    upvar #0 $var other
    if {$var eq "wemoname"} {
    	set name $other
    	set ip $str
    } else {
    	set ip $other
    	set name $str
    }
    if {[string length $name] < 3 || \
        ![regexp {^[12]?[0-9]?[0-9](\.[12]?[0-9]?[0-9]){3}$} $ip match]} {
        .net.usr.f.b1 state disabled
    } else {
        .net.usr.f.b1 state !disabled
    }
    return 1
}

proc cfg_namechgdlg {} {
    global wemoname wemoip wemoport

    cfg_nameadddlg
    set item [lindex [.net.f.f1.ni.f.tv selection] 0]
    lassign [.net.f.f1.ni.f.tv item $item -values] wemoname wemoip wempport
    .net.usr.f.b1 configure -command [list cfg_namechg $item]
    cfg_validate $wemoname "" wemoip
}

proc cfg_namechg {item} {
    global wemoname wemoip wemoport

    lassign [.net.f.f1.ni.f.tv item $item -values] name ip port
    set row [mk::select cfg.devices -exact name $name]
    
    if {$wemoname eq $name && $wemoip eq $ip && $wemoport eq $port} {
        # Name & IP were not changed
        destroy .net.usr
        return
    } else {
        if {[llength [mk::select cfg.devices -exact name $wemoname]] &&  \
             $row != [mk::select cfg.devices -exact name $wemoname]} {
            ttk::messageBox -parent .net.usr -icon error -type ok \
              -message "Name $wemoname already exists"
            return
        }
        if {[llength [mk::select cfg.devices -exact ip $wemoip]] && \
             $row != [mk::select cfg.devices -exact ip $wemoip]} {
            ttk::messageBox -parent .net.usr -icon error -type ok \
              -message "IP $wemoip already exists"
            return
        }
    }
    mk::set cfg.devices!$row name $wemoname ip $wemoip port $wemoport dis 0
    .net.f.f1.ni.f.tv item $item \
      -values [list $wemoname $wemoip $wemoport] -tags black
    destroy .net.usr
}

proc cfg_nameadddlg {} {
    global wemoname wemoip wemoport

    set wemoname ""
    set wemoip ""
    set wemoport "80"

    ttk::toplevel .net.usr
    wm title .net.usr "Configure Device"
    wm transient .net.usr .net
    wm withdraw .net.usr
    ttk::label .net.usr.l1 -text "Name:" -anchor w
    ttk::entry .net.usr.e1 -width 20 -textvariable wemoname \
      -validate all -validatecommand "cfg_validate %P %V wemoip"
    ttk::label .net.usr.l2 -text "IP:" -anchor w
    ttk::entry .net.usr.e2 -width 20 -textvariable wemoip \
       -validate all -validatecommand "cfg_validate %P %V wemoname"
    ttk::label .net.usr.l3 -text "Port:" -anchor w
    ttk::entry .net.usr.e3 -width 20 -textvariable wemoport  \
       -validate all -validatecommand "cfg_validate %P %V wemoport"
    ttk::separator .net.usr.sep
    ttk::frame .net.usr.f
    ttk::button .net.usr.f.b1 -text OK -width 6 -command cfg_nameadd \
      -state disabled
    ttk::button .net.usr.f.b2 -text Cancel -width 6 -command {destroy .net.usr}
    grid .net.usr.f.b1 .net.usr.f.b2 -padx 20 -pady 4
    grid anchor .net.usr.f center
    grid .net.usr.l1 .net.usr.e1 -padx 4 -pady 1 -sticky we
    grid .net.usr.l2 .net.usr.e2 -padx 4 -pady 1 -sticky we
    grid .net.usr.l3 .net.usr.e3 -padx 4 -pady 1 -sticky we
    grid .net.usr.sep - -padx 2 -pady {2 0} -sticky we
    grid .net.usr.f - -padx 4 -pady 3 -sticky we
    grid columnconfigure .net.usr .net.usr.e1 -weight 1
    bind .net.usr.e1 <Return> {.net.usr.f.b1 invoke}
    bind .net.usr.e2 <Return> {.net.usr.f.b1 invoke}
    bind .net.usr <F1> {hvHelp users}
    center .net.usr .net
    grab .net.usr
}

proc cfg_allow_discover {} {
    global cfg
    
    if {$cfg(discover) == 1} {
        .net.f.f1.ni.b4 state !disabled
    } else {
        .net.f.f1.ni.b4 state disabled
        after cancel start_search
    }
}

# set sort orders from clicked headers
proc cfg_sort {type} {
    global cfg
    
    if {$type eq "ip"} {
        set cfg(sortName) 0
        if {$cfg(sortIp) == 1} {
            set cfg(sortIp) -1
        } else {
            set cfg(sortIp) 1
        }
    } else {
        set cfg(sortIp) 0
        if {$cfg(sortName) == 1} {
            set cfg(sortName) -1
        } else {
            set cfg(sortName) 1
        }
    }
    cfg_sortlist 
}

# Sort device list according to sort orders
proc cfg_sortlist {} {
    global cfg
    
    if {$cfg(sortName) == 0 && $cfg(sortIp) == 0} {
        set rows [mk::select cfg.devices -globnc name "*"]
    } elseif {$cfg(sortName) == 1} {
        set rows [mk::select cfg.devices -sort name]
    } elseif {$cfg(sortName) == -1} {
        set rows [mk::select cfg.devices -rsort name]
    } elseif {$cfg(sortIp) == 1} {
        mk::loop row cfg.devices {
            lappend ips [mk::get $row ip]
        }
        set ips [lsort -dictionary $ips]
        foreach ip $ips {
            lappend rows [mk::select cfg.devices ip $ip]
        }
    } elseif {$cfg(sortIp) == -1} {
        mk::loop row cfg.devices {
            lappend ips [mk::get $row ip]
        }
        set ips [lsort -decreasing -dictionary $ips]
        foreach ip $ips {
            lappend rows [mk::select cfg.devices ip $ip]
        }
    }
    if {[winfo exist .net]} { 
        .net.f.f1.ni.f.tv delete [.net.f.f1.ni.f.tv children {}]
        foreach row $rows {
            if {[mk::get cfg.devices!$row dis] == 1} {
                set tag "blue"
            } else {
                set tag "black"
            }
            .net.f.f1.ni.f.tv insert {} end -values [mk::get cfg.devices!$row name ip port] -tags $tag
        }
    }
}

proc cfg_nameadd {} {
    global wemoname wemoip wemoport

    if {[llength [mk::select cfg.devices -exact name $wemoname]]} {
        ttk::messageBox -parent .net.usr -icon error -type ok \
          -message "Device $wemoname already exists"
        return
    }
    set row [mk::row append cfg.devices name $wemoname ip $wemoip port $wemoport dis 0]
    .net.f.f1.ni.f.tv insert {} end -values [list $wemoname $wemoip $wemoport] -tags black
    destroy .net.usr
}

proc cfg_namedel {} {
    set list [.net.f.f1.ni.f.tv selection]
    foreach n $list {
        set name [lindex [.net.f.f1.ni.f.tv item $n -values] 0]
        foreach row [lreverse [mk::select cfg.devices -exact name $name]] {
            mk::row delete cfg.devices!$row
        }
    }
    .net.f.f1.ni.f.tv delete $list
}

proc cfg_done {} {
    global sockChan
    
    saveconfig
    destroy .net
}

# End Configuration section

set gui [hvGuiInit]

loadconfig

if {$gui} {
    cfg_pluginmenu
    bind all <Key-KP_Enter> {event generate %W <Key-Return>}
}

hvTrigger $cfg(serPre) [list wemoserial]

